import { type mapping } from "@ada-anvil/metadraft-validator";

export const RULES_DESCRIPTION: Record<keyof typeof mapping, string> = {
  cip25Version1Validator: ``,
  cip25Version2Validator: ``,
  compareAttributesKeys: `The CompareAttributesKeys rule checks for attribute names in metadata that are too similar based on a Levenshtein distance, which measures how many character changes are needed to turn one word into another. If two attribute names are too close, it gives a warning.  It runs by looking at all attribute keys, comparing them, and reporting any that are nearly identical. If you have metadata with attributes like color, colour, and clr, this validator would warn you that these attribute names are too similar.`,
  compareRootKeys: ``,
  compareRootValues: ``,
  duplicateAssetName: ``,
  duplicateImage: ``,
  duplicateKeysValidator: ``,
  duplicateName: ``,
  duplicateNameAndImage: ``,
  hasRequiredKeysValidator: ``,
  keyAlphanumeric: ``,
  keyAnvilCasing: `The KeyAnvilCase validator ensures that the structure of your metadata follows specific naming conventions. It checks that all metadata keys are written in "camelCase," meaning the first word is lowercase and subsequent words are capitalized (e.g., attributeName). For any inner keys under the attributes section, it checks that they are written in "Title Case," where each word starts with a capital letter (e.g., Attribute Name). If any keys don't follow these formats, it raises a warning. For example, if a key is named Attribute_name instead of AttributeName, it would flag this as an issue.`,
  keyAttributesValidator: ``,
  keyCamelCase: ``,
  keyDescriptionValidator: ``,
  keyFilesValidator: ``,
  keyImageValidator: ``,
  keyLength: ``,
  keyLowerCase: ``,
  keyMediaTypeValidator: ``,
  keyMediaValidator: ``,
  keyNameValidator: ``,
  keySnakeCase: ``,
  keyTitleCase: ``,
  keyTraitsValidator: ``,
  keyUpperCase: ``,
  keyWhiteSpace: ``,
};
